"use strict";
const __awaiter =
  (this && this.__awaiter) ||
  function (e, i, c, s) {
    return new (c = c || Promise)(function (r, t) {
      function n(e) {
        try {
          a(s.next(e));
        } catch (e) {
          t(e);
        }
      }
      function o(e) {
        try {
          a(s.throw(e));
        } catch (e) {
          t(e);
        }
      }
      function a(e) {
        e.done
          ? r(e.value)
          : (function (r) {
              return r instanceof c
                ? r
                : new c(function (e) {
                    e(r);
                  });
            })(e.value).then(n, o);
      }
      a((s = s.apply(e, i || [])).next());
    });
  };
const __generator =
  (this && this.__generator) ||
  function (t, n) {
    let o;
    let a;
    let i;
    let e;
    let c = {
      label: 0,
      sent: function () {
        if (1 & i[0]) throw i[1];
        return i[1];
      },
      trys: [],
      ops: [],
    };
    return (
      (e = { next: r(0), throw: r(1), return: r(2) }),
      typeof Symbol === "function" &&
        (e[Symbol.iterator] = function () {
          return this;
        }),
      e
    );
    function r(r) {
      return function (e) {
        return (function (r) {
          if (o) throw new TypeError("Generator is already executing.");
          for (; c; )
            try {
              if (
                ((o = 1),
                a &&
                  (i =
                    2 & r[0]
                      ? a.return
                      : r[0]
                      ? a.throw || ((i = a.return) && i.call(a), 0)
                      : a.next) &&
                  !(i = i.call(a, r[1])).done)
              )
                return i;
              switch (((a = 0), i && (r = [2 & r[0], i.value]), r[0])) {
                case 0:
                case 1:
                  i = r;
                  break;
                case 4:
                  return c.label++, { value: r[1], done: !1 };
                case 5:
                  c.label++, (a = r[1]), (r = [0]);
                  continue;
                case 7:
                  (r = c.ops.pop()), c.trys.pop();
                  continue;
                default:
                  if (
                    !(i = (i = c.trys).length > 0 && i[i.length - 1]) &&
                    (r[0] === 6 || r[0] === 2)
                  ) {
                    c = 0;
                    continue;
                  }
                  if (r[0] === 3 && (!i || (r[1] > i[0] && r[1] < i[3]))) {
                    c.label = r[1];
                    break;
                  }
                  if (r[0] === 6 && c.label < i[1]) {
                    (c.label = i[1]), (i = r);
                    break;
                  }
                  if (i && c.label < i[2]) {
                    (c.label = i[2]), c.ops.push(r);
                    break;
                  }
                  i[2] && c.ops.pop(), c.trys.pop();
                  continue;
              }
              r = n.call(t, c);
            } catch (e) {
              (r = [6, e]), (a = 0);
            } finally {
              o = i = 0;
            }
          if (5 & r[0]) throw r[1];
          return { value: r[0] ? r[1] : void 0, done: !0 };
        })([r, e]);
      };
    }
  };
exports.__esModule = !0;
const dotenv = require("dotenv");
const config_1 = require("hardhat/config");
require("@nomiclabs/hardhat-etherscan"),
  require("@nomiclabs/hardhat-waffle"),
  require("@typechain/hardhat"),
  require("hardhat-gas-reporter"),
  require("solidity-coverage"),
  dotenv.config(),
  config_1.task("accounts", "Prints the list of accounts", function (e, a) {
    return __awaiter(void 0, void 0, void 0, function () {
      let r, t, n, o;
      return __generator(this, function (e) {
        switch (e.label) {
          case 0:
            return [4, a.ethers.getSigners()];
          case 1:
            for (r = e.sent(), t = 0, n = r; t < n.length; t++)
              (o = n[t]), console.log(o.address);
            return [2];
        }
      });
    });
  });
const config = {
  solidity: "0.8.11",
  networks: {
    ropsten: {
      url: process.env.ROPSTEN_URL || "",
      accounts:
        void 0 !== process.env.PRIVATE_KEY ? [process.env.PRIVATE_KEY] : [],
    },
  },
  gasReporter: { enabled: void 0 !== process.env.REPORT_GAS, currency: "USD" },
  etherscan: { apiKey: process.env.ETHERSCAN_API_KEY },
};
exports.default = config;
// # sourceMappingURL=hardhat.config.min.js.map
